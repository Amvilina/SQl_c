#pragma once
#include <string>
#include <vector>
#include <strstream>
#include <iostream>

//КЛАСС БАЗЫ ДАННЫХ
//
//База состоит из вектора таблиц
//Класс таблицы будет описан ниже
//
//База данных хранится на стеке
//Можно было реализовать файловую систему и выделение памяти из кучи, но
//я не очень разобрался как работать с файлами в этой библиотеке, поэтому
//моя база данных живет на время выполнения программы :)
//
//База данных довольно неэффективная, так как происходит много удаления, копирования, вставки
//Я не использовал современные технологии оптимизации, чтобы не делать из небольшого проекта новой MySql :/
class MyDB
{
    using ui = unsigned int;
public:

    //КЛАСС ТАБЛИЦЫ
    //
    //Сама таблица представляет из себя 2-х мерный вектор строк
    //Все данные в таблице хранятся в виде строк(массива char-ов)
    //
    //Можно было бы добавить возможность выбрать тип данных для каждого столбца, но это ограничило бы пользователя
    class MyTable{
    public:
        MyTable() = default;
    private:

        //имя таблицы
        std::string tableName;

        //вектор, который содержит количество символов в самых длинных словах каждого столбца
        std::vector<ui> longestWord;

        //вектор строк, который содержит шапку таблицы(названия столбцов)
        std::vector<std::string> tableFormat;

        //сама таблица, 2-х мерный вектор строк
        std::vector<std::vector<std::string>> rows;

        //вспомогательная функция, которая возвращает строку 'str     ' длиной length ; строка дополняется пробелами справа
        std::string AddSpaces(std::string str, ui length) const;

        //вспомогательная функция, которая возвращает количество символов, которое будет выделяться при выводе для id
        ui IdLength() const;

        //вспомогательная переменная, чтобы обойти ограничения инициализации
        bool isInitialize = false;

    public:

        //добавляет строку в таблицу
        //если размер входного вектора не равен размеру шапки -> false
        //обновляет longestWord
        bool AddRow(std::vector<std::string> row);

        //удаляет строку по id
        //если id неверный, то -> false
        //обновляет longestWord
        bool DeleteRow(ui id);

        //возвращает строку в специальном формате, который идет на вывод
        std::string GetStringRow(ui id) const;

        //возвращает имя таблицы
        std::string GetTableName() const;

        //изменяет имя таблицы
        void SetTableName(const std::string& nm);

        //возвращает шапку таблицы в специальном формате, который идет на вываод
        std::string GetStringTableFormat() const;

        //устанавливает шапку таблицы
        //будет выполняться, только если isInitialize == false
        //небольшой костыль :/
        void SetTableFormat(const std::vector<std::string>& tf);

        //возвращает таблицу в специальном формате, который идет на вывод
        std::string GetStringTable() const;
    };

    //================================================================================================================

    //Инициализация базы данных 2-мя таблицами
    MyDB();

    //Возвращает отформатированную строку со строчкой 'id' из таблицы 'name'
    //command: 'name' 'id'
    //Если таблицы 'name' не было, то ничего не делает(возвращает строку, в которой описана ошибка)
    //Если 'id' - не число или не принадлежит таблице, то ничего не делает(возвращает строку, в которой описана ошибка)
    std::string GetRow(const std::string& command) const;

    //Добавляет строку {'Arg1' 'Arg2' ...} в конец таблицы 'name'
    //command: 'name' 'Arg1' 'Arg2' ...
    //Если таблицы 'name' не было, то ничего не делает(возвращает строку, в которой описана ошибка)
    //Если количество аргументов не совпадает с количеством столбцов, то ничего не делает(возвращает строку, в которой описана ошибка)
    std::string AddRow(const std::string& command);

    //Удаляет строку 'id' из таблицы 'name'
    //command: 'name' 'id'
    //Если таблицы 'name' не было, то ничего не делает(возвращает строку, в которой описана ошибка)
    //Если 'id '- не число или не принадлежит таблице, то ничего не делает(возвращает строку, в которой описана ошибка)
    std::string DeleteRow(const std::string& command);

    //Возвращает отформатированную строку с названиями всех таблиц
    std::string GetTableNames() const;

    //Меняет название таблицы на новое
    //command: 'Old_Name' 'New_Name'
    //Если таблицы 'Old_Name' не было, то ничего не делает(возвращает строку, в которой описана ошибка)
    std::string ChangeTableName(const std::string& command);

    //Возвращает отформатированную строку с шапкой таблицы 'name'
    //Если таблицы 'name' не было, то ничего не делает(возвращает строку, в которой описана ошибка)
    std::string GetTableFormat(const std::string& name) const;

    //Возвращает отформатированную строку со всеми таблицами
    std::string GetTables() const;

    //Возвращает отформатированную строку с таблицей 'name'
    //Если таблицы 'name' не было, то ничего не делает(возвращает строку, в которой описана ошибка)
    std::string GetTable(const std::string& name) const;

    //Добавляет таблицу 'name' с шапкой {'Arg1' 'Arg2' ...}
    //command: 'name' 'Arg1' 'Arg2' ...
    //Если таблицы 'name' уже существовала, то ничего не делает(возвращает строку, в которой описана ошибка)
    std::string AddTable(const std::string& command);

    //Удаляет таблицу 'name'
    //Если таблицы 'name' не было, то ничего не делает(возвращает строку, в которой описана ошибка)
    std::string DeleteTable(const std::string& name);

private:

    //Сами таблицы
    std::vector<MyTable> tables;

};


